/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

import org.gradle.api.JavaVersion

def minJavaVersion = JavaVersion.VERSION_1_8;
ext.buildDir = "${rootDir}/target/gradle"

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'com.jfrog.bintray'

    repositories {
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    // println "delete =  ${rootProject.ext.buildDir}"
    delete "${rootProject.ext.buildDir}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    dependencies {
        compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
        compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
        testCompile 'junit:junit:4.8.2'
        testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.12'
    }

    tasks.withType(Jar) {
        destinationDir = file("${rootProject.ext.buildDir}/$project.name/lib")
    }

    //Should
    test {
        filter {
            exclude "**/*TestManual*"
            //Temporarily remove too much time hanging
            exclude "quarks/test/connectors/mqtt/**"
        }
    }

    def versionprop = "${version}"

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publish = false
        pkg {
            repo = 'maven'
            name = 'quarks'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/apache/incubator-quarks.git'
            version {
                name = "${versionprop}"
                desc = 'What does this do'
                released = new Date()
                vcsTag = "${versionprop}"
            }
        }
        publications = ['Quarks']
    }

    jar {
        archiveName = "${rootProject.name}.${project.name}.jar".replaceAll("/", ".")

        if (project.hasProperty('moduleName') && !projectName.equals(moduleName)) {
            appendix = moduleName
        }

        manifest.attributes provider: 'Apache Software Foundation'

        manifest {
            attributes 'Implementation-Version': version,
                       'Implementation-Vendor': 'dev@quarks.incubator.apache.org'
        }
    }

    task copyToLib(type: Copy) {
        // println "copyToLibJar : ${rootProject.ext.buildDir}/$project.name/ext"
        into "${rootProject.ext.buildDir}/$project.name/ext"
        from configurations.compile.filter{!it.name.startsWith('quarks')}
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        // baseName-appendix-version-classifier.extension
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives sourceJar
    }

    publishing {
        publications {
            Quarks(MavenPublication) {
                from components.java
                groupId group
                artifactId "${project.name}".replaceAll("/", ".")
                version version

                artifact sourceJar
            }
        }
    }
}